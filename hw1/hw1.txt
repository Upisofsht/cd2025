以下是依據你提供的 hw0 程式碼以及 hw1 說明文件（參考：citeturn0file0）的內容，對 hw1 需要完成工作項目的說明，主要重點如下：

---

## 作業內容概述 (Overview)

你需要**基於 hw0 的程式碼**，進行修改並實作一個簡單的 **Crap-C Scanner**（一個簡化版本的 C 語言掃描器）。這個掃描器的主要功能在於讀取一個 C 檔案（例如 main.c），然後辨識裡面的 Token 並輸出相對應的 Token 類型。

*You are expected to modify your hw0 code to implement a simple scanner for a simplified C language ("Crap-C Scanner"). The scanner should read a file (e.g., main.c) and output the recognized tokens along with their types.*

---

## 主要需辨識的 Tokens (Tokens to be Recognized)

根據 pdf 說明文件（citeturn0file0），必須辨識的 token 以及對應的輸出格式如下：

1. **關鍵字 (Keywords):**
   - `int` 輸出為：`int: TYPE_TOKEN`
   - `main` 輸出為：`main: MAIN_TOKEN`
   - `if` 輸出為：`if: IF_TOKEN`
   - `else` 輸出為：`else: ELSE_TOKEN`
   - `while` 輸出為：`while: WHILE_TOKEN`

2. **識別碼 (Identifier):**
   - 任何非關鍵字的字母組合都應視為識別碼，例如：`cd2025` 輸出為：`cd2025: ID_TOKEN`

3. **數字 (Literal):**
   - 整數數字皆屬於 literal，輸出格式為：`5: LITERAL_TOKEN`（這裡只處理整數）

4. **運算子與特殊符號：**
   - 關係運算符 (Relational operators)：
     - `==` 輸出為：`==: EQUAL_TOKEN`
     - `>=` 輸出為：`>=: GREATEREQUAL_TOKEN`
     - `<=` 輸出為：`<=: LESSEQUAL_TOKEN`
     - `>`  輸出為：`>: GREATER_TOKEN`
     - `<`  輸出為：`<: LESS_TOKEN`
   - 括號和大括號：
     - `(` 輸出為：`(: LEFTPAREN_TOKEN`
     - `)` 輸出為：`): REFTPAREN_TOKEN`  *(注意文件中採用 "REFTPAREN_TOKEN"，雖然通常用 "RIGHTPAREN_TOKEN")*
     - `{` 輸出為：`{: LEFTBRACE_TOKEN`
     - `}` 輸出為：`}: REFTBRACE_TOKEN` *(同上，"REFTBRACE_TOKEN" 為文件上所示)*
   - 其他符號：
     - `=` 為指派運算符，輸出為：`=: ASSIGN_TOKEN`
     - `;` 為分號，輸出為：`;: SEMICOLON_TOKEN`
     - `+` 為加號，輸出為：`+: PLUS_TOKEN`
     - `-` 為減號，輸出為：`-: MINUS_TOKEN`

5. **空白字元 (Whitespace):**
   - 空格、換行、Tab 等皆應忽略，不視為需要輸出的 Token。

*According to the assignment, the scanner should identify keywords, identifiers, integer literals, relational operators, punctuation (parentheses/braces, semicolon), assignment, and basic arithmetic operators. Whitespace should be ignored.*

---

## 實作方式與注意事項 (Implementation Guidelines and Constraints)

1. **掃描器實作方式：**
   - 你可以選擇使用 DFA（Deterministic Finite Automata）或利用 Regular Expression 的概念來設計掃描器。
   - 必須依據你先前 hw0 的程式碼來進行修改，也就是說，你可以重用讀取檔案、遍歷字元這部分的程式邏輯，然後在此基礎上加入 token 分析與辨識。

2. **檔案輸入與輸出：**
   - 程式從檔案（例如 main.c）讀取內容，依據讀入的字元進行 token 分析。
   - 分析完畢後，依據每個 token 的種類輸出「值: TOKEN_TYPE」的格式，如文件所示。

3. **程式限制：**
   - **只能包含** `<stdlib.h>`、`<stdio.h>` 與 `<string.h>`。不得引入其他標頭檔。
   - **必須使用 C 語言**：不可以使用 C++ 或其他語言來實作。
   - 如果違反規則（例如包含未允許的標頭檔），將獲得零分。

4. **GitHub 提交要求：**
   - 請在 GitHub 上的 repo “cd2025” 中建立一個名為 `hw1` 的資料夾，再將你的 `main.c` 推送至該資料夾內。

*The implementation must strictly adhere to the requirements: you must use only the allowed header files, base your work on your previous hw0 code, and follow the provided token specifications. Also, the submission should follow the repository structure as explained.*

---

## 程式修改的主要重點 (Key Points for Modifying Your Code)

- **掃描流程設計：**  
  根據目前的 hw0 程式碼，你是利用 linked list 建立一個字元統計的方式來處理檔案輸入。在 hw1 你需要改變這個流程，轉而以字元流為基礎，逐步分析並組合成 tokens。  
  *You need to modify your current character-by-character reading logic to perform tokenization by grouping characters according to the rules defined (keywords, identifiers, numbers, etc.).*

- **狀態轉移（State Transition）：**  
  你需要設計一個狀態機（或利用類似正則表示法的方式），例如：
  - 初始狀態遇到字母則可能進入識別符號或關鍵字的狀態。
  - 遇到數字則進入數字分析狀態。
  - 遇到符號（如 =, +, -, (, ) 等）則立刻辨識為相應的 token（或在遇到可能形成多字元 token 時，例如 `==`, `>=`, `<=`，需檢查下一個字元）。
  
  *Design a state machine that transitions between states based on the current input character—for example, differentiating between letters (potential keywords or identifiers), digits (number literals), and symbols (operators and punctuation).*

- **忽略空白字元：**  
  在掃描過程中，對於空格、Tab、換行應該直接跳過，不進行 token 輸出。

- **錯誤處理（如果有）：**  
  雖然說明文件只要求辨識檔案中出現的 token，但在程式設計上可以簡單處理未定義的符號或錯誤情況，但主要著重在能正確輸出文件內存在的 token。

---

## 輸出格式範例 (Sample Output Format)

依照說明文件中的示例，程式輸出應類似以下格式（部分範例）：

```
int: TYPE_TOKEN 
main: MAIN_TOKEN 
(: LEFTPAREN_TOKEN 
): REFTPAREN_TOKEN 
{: LEFTBRACE_TOKEN 
int: TYPE_TOKEN 
cd2025: ID_TOKEN 
=: ASSIGN_TOKEN 
5: LITERAL_TOKEN 
;: SEMICOLON_TOKEN 
... 
}: REFTBRACE_TOKEN 
...
if: IF_TOKEN 
else: ELSE_TOKEN 
while: WHILE_TOKEN 
==: EQUAL_TOKEN 
>=: GREATEREQUAL_TOKEN 
<=: LESSEQUAL_TOKEN 
>: GREATER_TOKEN 
<: LESS_TOKEN 
+: PLUS_TOKEN 
-: MINUS_TOKEN
```

*Each token read from the input should be output on a new line in the format “token_value: TOKEN_TYPE”.*

---

## 總結 (Summary)

簡單來說，hw1 的主要工作如下：
- **修改 hw0 程式碼**：從單純讀取檔案並統計字元轉為掃描並分析 token。
- **實作掃描器**：使用 DFA 或類似正則表示法的方法辨識關鍵字、識別符號、數字字面值、各種運算子以及特殊符號，並忽略空白字元。
- **符合規範**：只能使用 `<stdlib.h>`、`<stdio.h>` 與 `<string.h>`，不得使用其他外部函式庫。
- **輸出格式**：每個 token 依照「值: TOKEN_TYPE」輸出。
- **提交要求**：需將修改後的程式碼放置於 GitHub repo “cd2025” 下的 `hw1` 資料夾中，並在截止前提交。

*In summary, you must transform your basic file-reading program from hw0 into a token scanner for a simplified C language, adhering to strict library usage, output format, and repository submission requirements.*

---

希望這個說明能夠協助你清楚理解 hw1 的要求並順利進行實作。若有疑問，請再補充說明！